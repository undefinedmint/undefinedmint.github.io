---
// TableOfContents.astro
// 用于从文章内容中提取标题并显示目录

export interface Props {
  headings: {
    depth: number;
    slug: string;
    text: string;
  }[];
}

const { headings } = Astro.props;

// 过滤掉不需要的标题深度，通常只需要 h2 和 h3
const filteredHeadings = headings.filter(
  heading => heading.depth >= 2 && heading.depth <= 3
);
---

{
  filteredHeadings.length > 0 && (
    <nav class="toc">
      <div class="toc-title">Table of Contents</div>
      <ul>
        {filteredHeadings.map(heading => (
          <li
            class={`toc-item toc-item-h${heading.depth}`}
            data-heading={heading.slug}
          >
            <a href={`#${heading.slug}`}>{heading.text}</a>
          </li>
        ))}
      </ul>
    </nav>
  )
}

<style>
  .toc {
    @apply m-0 rounded-lg border border-skin-line bg-skin-fill/50 p-4 shadow-sm backdrop-blur-sm;
  }

  .toc-title {
    @apply text-lg font-bold text-skin-accent border-b border-skin-line/30 pb-2;
  }

  .toc ul {
    @apply list-none pl-0;
  }

  .toc-item {
    @apply py-0.5 transition-all duration-200 ease-in-out;
  }

  .toc-item-h2 {
    @apply pl-0;
  }

  .toc-item-h2 > a {
    @apply text-skin-accent font-semibold text-base;
  }

  .toc-item-h3 {
    @apply pl-6 relative;
    font-size: 14px;
  }

  .toc-item-h3::before {
    content: "•";
    @apply absolute left-3 text-skin-base opacity-40;
  }

  .toc a {
    @apply hover:text-skin-accent transition-colors duration-200 text-skin-base/80 no-underline;
    display: block;
    padding: 4px 8px;
    border-radius: 6px;
  }

  .toc a:hover {
    @apply bg-skin-accent/10;
  }

  .toc-item.active > a {
    @apply font-bold text-skin-accent bg-skin-accent/20;
    border-left: 4px solid;
    @apply border-skin-accent;
    transform: translateX(2px);
  }

  .toc-item-h2.active > a {
    @apply bg-skin-accent/25;
  }

  .toc-item.active {
    @apply scale-105;
  }

  /* 响应式设计 */
  @media (max-width: 768px) {
    .toc {
      @apply mx-2 p-4;
    }
    
    .toc-item-h3 {
      @apply pl-4;
    }
    
    .toc-item-h3::before {
      @apply left-1;
    }
  }
</style>

<script>
  function initTableOfContents() {
    // 将目录项滚动到视口内的函数
    function scrollTocItemIntoView(item) {
      // 找到可滚动的容器（.toc-sidebar）
      const scrollableContainer = item.closest('.toc-sidebar');
      if (!scrollableContainer) return;
      
      const containerRect = scrollableContainer.getBoundingClientRect();
      const itemRect = item.getBoundingClientRect();
      
      // 计算相对位置
      const itemTop = itemRect.top - containerRect.top;
      const itemBottom = itemRect.bottom - containerRect.top;
      const containerHeight = containerRect.height;
      
      // 只有在目录项真正超出可视区域时才滚动
      const topThreshold = 100; // 为TOC标题留出空间
      const bottomThreshold = 40;
      
      if (itemTop < topThreshold) {
        // 目录项在顶部被遮挡，向上滚动
        scrollableContainer.scrollTo({
          top: scrollableContainer.scrollTop + itemTop - topThreshold,
          behavior: 'smooth'
        });
      } else if (itemBottom > containerHeight - bottomThreshold) {
        // 目录项在底部被遮挡，向下滚动
        scrollableContainer.scrollTo({
          top: scrollableContainer.scrollTop + itemBottom - containerHeight + bottomThreshold,
          behavior: 'smooth'
        });
      }
    }
    
    // 平滑滚动到点击的标题
    const tocLinks = document.querySelectorAll('.toc a');
    
    tocLinks.forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        const targetId = link.getAttribute('href')?.substring(1);
        const targetElement = document.getElementById(targetId || '');
        
        if (targetElement) {
          targetElement.scrollIntoView({ behavior: 'smooth' });
          // 更新URL但不跳转页面
          history.pushState(null, '', `#${targetId}`);
        }
      });
    });

    // 高亮显示当前活跃的目录项
    const tocItems = document.querySelectorAll('.toc-item');
    const headingElements = document.querySelectorAll('#article h2, #article h3');
    
    const highlightActiveHeading = () => {
      // 使用固定Header的高度作为偏移量
      const scrollPosition = window.scrollY + 120; // 固定Header高度 + 一些缓冲
      
      // 创建标题位置数组
      const headingPositions = Array.from(headingElements).map(heading => ({
        id: heading.id,
        top: heading.getBoundingClientRect().top + window.scrollY,
        element: heading
      })).filter(item => item.id && item.id.trim() !== '').sort((a, b) => a.top - b.top);
      
      // 找到当前可见的标题
      let currentHeading = null;
      
      for (let i = 0; i < headingPositions.length; i++) {
        const current = headingPositions[i];
        const next = headingPositions[i + 1];
        
        if (scrollPosition >= current.top - 50) { // 增加一些容错空间
          if (!next || scrollPosition < next.top - 50) {
            currentHeading = current.id;
            break;
          }
        }
      }
      
      // 如果没有找到，且有标题，使用第一个标题
      if (!currentHeading && headingPositions.length > 0) {
        if (scrollPosition < headingPositions[0].top) {
          currentHeading = headingPositions[0].id;
        } else {
          // 如果滚动到最后，使用最后一个标题
          currentHeading = headingPositions[headingPositions.length - 1].id;
        }
      }
      
      // 更新活跃的目录项
      let activeItem = null;
      tocItems.forEach(item => {
        const itemHeading = item.getAttribute('data-heading');
        if (itemHeading === currentHeading) {
          item.classList.add('active');
          activeItem = item;
        } else {
          item.classList.remove('active');
        }
      });
      
      // 将活跃的目录项滚动到视口内
      if (activeItem) {
        setTimeout(() => scrollTocItemIntoView(activeItem), 100);
      }
    };
    
    // 使用节流函数优化滚动性能
    let ticking = false;
    const scrollHandler = () => {
      if (!ticking) {
        requestAnimationFrame(() => {
          highlightActiveHeading();
          ticking = false;
        });
        ticking = true;
      }
    };
    
    // 页面滚动时更新活跃项
    window.addEventListener('scroll', scrollHandler, { passive: true });
    
    // 页面加载时初始化
    setTimeout(highlightActiveHeading, 100); // 稍微延迟确保DOM完全加载
  }

  // 在页面加载后运行
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initTableOfContents);
  } else {
    initTableOfContents();
  }

  // 支持Astro的视图转换
  document.addEventListener('astro:after-swap', initTableOfContents);
</script> 